#!/usr/bin/env python3

import asyncio
import requests
import os
import logging
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('/app/backend/.env')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
CRYPTOBOT_TOKEN = os.environ.get('CRYPTOBOT_TOKEN')
CRYPTOBOT_BASE_URL = os.environ.get('CRYPTOBOT_BASE_URL')

async def create_cryptobot_invoice(amount: float, user_id: int, currency: str = "RUB"):
    """–°–æ–∑–¥–∞–Ω–∏–µ CryptoBot –∏–Ω–≤–æ–π—Å–∞ - –∫–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ server.py"""
    try:
        url = f"{CRYPTOBOT_BASE_URL}/createInvoice"
        headers = {
            "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN,
            "Content-Type": "application/json"
        }
        
        payload = {
            "currency_type": "fiat",
            "fiat": currency,
            "amount": str(amount),
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –£–ó–†–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {amount}‚ÇΩ",
            "paid_btn_name": "callback",
            "paid_btn_url": "https://t.me/search1_test_bot",
            "payload": f"crypto_payment_{user_id}_{amount}"
        }
        
        logging.info(f"ü§ñ –°–æ–∑–¥–∞–µ–º CryptoBot –∏–Ω–≤–æ–π—Å –¥–ª—è {amount} {currency}")
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        result = response.json()
        logging.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result
        
    except Exception as e:
        logging.error(f"CryptoBot API error: {e}")
        return {"ok": False, "error": {"message": str(e)}}

async def send_telegram_message(chat_id: int, text: str, parse_mode: str = "Markdown", reply_markup: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram - –∫–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ server.py"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
        response = requests.post(url, json=payload, timeout=10)
        success = response.status_code == 200
        logging.info(f"üì® –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: {success} (–∫–æ–¥: {response.status_code})")
        if not success:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
        return success
    except Exception as e:
        logging.error(f"Failed to send Telegram message: {e}")
        return False

def create_back_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ù–∞–∑–∞–¥" """
    return {
        "inline_keyboard": [
            [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
        ]
    }

async def simulate_handle_crypto_payment_amount(chat_id: int, user_id: int, crypto_type: str, amount: str):
    """–°–∏–º—É–ª—è—Ü–∏—è handle_crypto_payment_amount"""
    logging.info(f"üí≥ simulate_handle_crypto_payment_amount: chat_id={chat_id}, crypto_type={crypto_type}, amount={amount}")
    
    crypto_names = {
        "btc": "Bitcoin (BTC)",
        "eth": "Ethereum (ETH)", 
        "usdt": "USDT",
        "ltc": "Litecoin (LTC)"
    }
    
    try:
        amount_float = float(amount)
        logging.info(f"üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {amount_float}")
        
        if amount_float < 100:
            logging.warning(f"‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: {amount_float}")
            await send_telegram_message(
                chat_id,
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ",
                reply_markup=create_back_keyboard()
            )
            return
            
        # Create CryptoBot invoice
        invoice_result = await create_cryptobot_invoice(amount_float, user_id, currency="RUB")
        
        if invoice_result.get('ok'):
            invoice_data = invoice_result.get('result', {})
            invoice_url = invoice_data.get('bot_invoice_url')
            invoice_id = invoice_data.get('invoice_id')
            
            logging.info(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: ID={invoice_id}, URL={invoice_url}")
            
            if invoice_url:
                wallet_text = f"üí∞ *–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ß–ï–†–ï–ó {crypto_names.get(crypto_type, crypto_type.upper())}*\n\n"
                wallet_text += f"üíé –°—É–º–º–∞: {amount_float} ‚ÇΩ\n"
                wallet_text += f"üìã ID –ø–ª–∞—Ç–µ–∂–∞: {invoice_id}\n\n"
                wallet_text += f"‚ö° *–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ:* 1-30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
                wallet_text += f"üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @Sigicara\n\n"
                wallet_text += f"üëÜ *–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã*"
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "url": invoice_url}],
                        [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "menu_balance"}]
                    ]
                }
                
                logging.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã")
                success = await send_telegram_message(chat_id, wallet_text, reply_markup=keyboard)
                if success:
                    logging.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º")
            else:
                logging.error("‚ùå –ù–µ—Ç URL –∏–Ω–≤–æ–π—Å–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                await send_telegram_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=create_back_keyboard()
                )
        else:
            error_msg = invoice_result.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {error_msg}")
            await send_telegram_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_msg}",
                reply_markup=create_back_keyboard()
            )
        
    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É–º–º—ã: {e}")
        await send_telegram_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞",
            reply_markup=create_back_keyboard()
        )
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await send_telegram_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_keyboard()
        )

async def test_full_crypto_flow():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç crypto flow"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π crypto flow...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_chat_id = 123456789
    test_user_id = 123456789
    test_crypto_type = "btc"
    test_amount = "100"
    
    print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:")
    print(f"   chat_id: {test_chat_id}")
    print(f"   user_id: {test_user_id}")
    print(f"   crypto_type: {test_crypto_type}")
    print(f"   amount: {test_amount}")
    print("-" * 50)
    
    try:
        await simulate_handle_crypto_payment_amount(test_chat_id, test_user_id, test_crypto_type, test_amount)
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ crypto flow...")
    print(f"TELEGRAM_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_TOKEN else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"CRYPTOBOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if CRYPTOBOT_TOKEN else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"CRYPTOBOT_BASE_URL: {CRYPTOBOT_BASE_URL}")
    print()
    
    asyncio.run(test_full_crypto_flow())