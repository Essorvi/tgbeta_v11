#!/usr/bin/env python3

import asyncio
import sys
import os
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
os.environ['MONGO_URL'] = 'mongodb://localhost:27017'
os.environ['DB_NAME'] = 'telegram_bot_db'
os.environ['TELEGRAM_TOKEN'] = '7335902217:AAH0ocPm9dd48_qwvRkVVF6lGrj3K1s75us'
os.environ['CRYPTOBOT_TOKEN'] = '429820:AANv0kGVo4SahNRE0D3LOjFjL1eiUiSebql'
os.environ['CRYPTOBOT_BASE_URL'] = 'https://pay.crypt.bot/api'

async def test_callback_logic():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    callback_data_tests = [
        "crypto_btc",           # –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—É–º–º
        "crypto_btc_100",       # –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –Ω–∞ 100‚ÇΩ
        "crypto_btc_250",       # –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –Ω–∞ 250‚ÇΩ
        "crypto_btc_custom",    # –î–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ —Å—É–º–º—ã
    ]
    
    for data in callback_data_tests:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º callback_data: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —É—Å–ª–æ–≤–∏–π
        if data.startswith("crypto_"):
            print("‚úÖ startswith('crypto_') - TRUE")
            
            if "_btc" in data or "_eth" in data or "_usdt" in data or "_ltc" in data:
                print("‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É - TRUE")
                
                underscore_count = data.count("_")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π: {underscore_count}")
                
                if data.count("_") >= 2:
                    print("‚úÖ data.count('_') >= 2 - TRUE")
                    parts = data.split("_")
                    print(f"üìù –ß–∞—Å—Ç–∏: {parts}")
                    
                    if len(parts) >= 3:
                        crypto_type = parts[1]
                        amount = parts[2]
                        print(f"üí∞ crypto_type: {crypto_type}, amount: {amount}")
                        
                        if amount == "custom":
                            print("üîß –î–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å handle_crypto_custom_amount")
                        else:
                            print("üí≥ –î–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å handle_crypto_payment_amount")
                    else:
                        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ callback_data")
                else:
                    print("‚úÖ data.count('_') < 2 - TRUE")
                    if len(data.split("_")) >= 2:
                        crypto_type = data.split("_")[1]
                        print(f"üè† –î–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å handle_crypto_payment –¥–ª—è {crypto_type}")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å crypto_type")
            else:
                print("‚ùå –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
        else:
            print("‚ùå –ù–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'crypto_'")
        
        print("-" * 60)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∞ –ª–æ–≥–∏–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    asyncio.run(test_callback_logic())